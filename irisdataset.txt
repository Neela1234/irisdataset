import csv
import numpy as np
import pandas as pd
import matplotlib
from matplotlib import pyplot as plt
#matplotlib.style.use('ggplot')
import pylab
import seaborn as sns
from IPython.core.display import display, HTML
data=pd.read_csv(r"C:\\Users\\Shiva Reddy\\Downloads\\bhanu\\project 1 iris ana\\Iris.csv", header = 0)
data = data.reset_index()
data.head()
species_list = list(data["Species"].unique())
print("Types of species: %s\n" % species_list)
print("Dataset length: %i\n" % len(data))
print("Dataset length: %i\n" % len(data))
print("Sepal length variance:\t %f" % np.var(data["SepalLengthCm"]))
print("Sepal width variance: \t %f" % np.var(data["SepalWidthCm"]))
print("Petal length variance:\t %f" % np.var(data["PetalLengthCm"]))
print("Petal width variance: \t %f\n" % np.var(data["PetalWidthCm"]))
print("Sepal length stddev:\t %f" % np.std(data["SepalLengthCm"]))
print("Sepal width stddev: \t %f" % np.std(data["SepalWidthCm"]))
print("Petal length stddev:\t %f" % np.std(data["PetalLengthCm"]))
print("Petal width stddev: \t %f\n" % np.std(data["PetalWidthCm"]))
print("Data describe\n---")
print(data[data.columns[2:]].describe())
data.hist(
 column=["SepalLengthCm","SepalWidthCm", 
"PetalLengthCm", "PetalWidthCm", "Species"],
    figsize=(10, 10)
    #,sharey=True, sharex=True
)
pylab.suptitle("Analyzing distribution for the series", fontsize="xx-large")
import scipy.stats as stats
for param in ["SepalLengthCm", "SepalWidthCm", "PetalLengthCm", "PetalWidthCm"]:
	z, pval = stats.normaltest(data[param])
 #print(z)
 	if(pval < 0.055):
  		print("%s has a p-value of %f - distribution is not normal" % (param, pval))
 	else:
  		print("%s has a p-value of %f" % (param, pval))
display(HTML('<h1>Analyzing the '+'<ahref="https://en.wikipedia.org/wiki/Pearson_correlation_coefficient"+ 'Pearson correlation coefficient</a></h1>')) 
import numpy as np
import pandas as pd
import matplotlib
from matplotlib import pyplot as plt
#matplotlib.style.use('gg plot')
import pylab
import seaborn as sns
from IPython.core.display import display, HTML
data=pd.read_csv(r"C:\\Users\\ShivaReddy\\Downloads\\bhanu\\project 1 iris ana\\Iris.csv", header = 0)
data = data.reset_index()
data.head()
species_list = list(data["Species"].unique())
print("Types of species: %s\n" % species_list)
print("Dataset length: %i\n" % len(data))
print("Dataset length: %i\n" % len(data))
print("Sepal length variance:\t %f" % np.var(data["SepalLengthCm"]))
print("Sepal width variance: \t %f" % np.var(data["SepalWidthCm"]))
print("Petal length variance:\t %f" % np.var(data["PetalLengthCm"]))
print("Petal width variance: \t %f\n" % np.var(data["PetalWidthCm"]))
print("Sepal length stddev:\t%f"% np.std(data["SepalLengthCm"]))
print("Sepal width stddev: \t %f" % np.std(data["SepalWidthCm"]))
print("Petal length stddev:\t %f" % np.std(data["PetalLengthCm"]))
print("Petal width stddev: \t %f\n" % np.std(data["PetalWidthCm"]))
print("Data describe\n---")
print(data[data.columns[2:]].describe())
data.hist(
    column=["SepalLengthCm", "SepalWidthCm", "PetalLengthCm", "PetalWidthCm", "Species"],
    figsize=(10, 10)
    #,sharey=True, sharex=True
)
pylab.suptitle("Analyzing distribution for the series", fontsize="xx-large")
import scipy.stats as stats
for param in ["SepalLengthCm", "SepalWidthCm", "PetalLengthCm", "PetalWidthCm"]:
	z, pval = stats.normaltest(data[param])
 #print(z)
 	if(pval < 0.055):
  		print("%s has a p-value of %f - distribution is not normal" % (param, pval))
 	else:
  		print("%s has a p-value of %f" % (param, pval))
display(HTML('<h1>Analyzing the ' +
             '<a href="https://en.wikipedia.org/wiki/Pearson_correlation_coefficient">' +
             'Pearson correlation coefficient</a></h1>'))
dt = data[data.columns[2:]]
corr = dt.corr(method="pearson") #returns a dataframe, so it can be reusedef="https://en.wikipedia.org/wiki/Pearson_correlation_coefficient">' +
 'Pearson correlation coefficient</a></h1>'))
dt = data[data.columns[2:]]
corr = dt.corr(method="pearson") #returns a dataframe, so it can be reused